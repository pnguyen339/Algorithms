---------------------------
Results for the input graph
---------------------------

Transmission Range = 1.0 meters.

The GPSR algorithm is successful 30/45 times.
The average time taken by the GPSR algorithm on successful runs is 51026 nanoseconds.

Dijkstra's algorithm (Min Latency) is successful 45/45 times.
The average time taken by Dijkstra's algorithm (Min Latency) on successful runs is 104246 nanoseconds.

Dijkstra's algorithm (Min Hops) is successful 45/45 times.
The average time taken by Dijkstra's algorithm (Min Hops) on successful runs is 118637 nanoseconds.


---------------------------
Results for the input graph
---------------------------

Transmission Range = 2.0 meters.

The GPSR algorithm is successful 45/45 times.
The average time taken by the GPSR algorithm on successful runs is 35679 nanoseconds.

Dijkstra's algorithm (Min Latency) is successful 45/45 times.
The average time taken by Dijkstra's algorithm (Min Latency) on successful runs is 133801 nanoseconds.

Dijkstra's algorithm (Min Hops) is successful 45/45 times.
The average time taken by Dijkstra's algorithm (Min Hops) on successful runs is 149348 nanoseconds.


//////////////////////////////if 'print' is true/////////////////////////
---------------------------
Results for the input graph
---------------------------

Transmission Range = 1.1 meters.

Paths between all pairs of vertices using the GPSR algorithm:
I = 0 J = 1 : [(0.0,0.0), (1.0,0.0)]
I = 0 J = 2 : [(0.0,0.0), (1.0,0.0), (2.0,0.0)]
I = 0 J = 3 : [(0.0,0.0), (1.0,0.0), (1.0,1.0)]
I = 0 J = 4 : [(0.0,0.0), (1.0,0.0), (1.0,1.0), (1.0,2.0)]
I = 0 J = 5 : [(0.0,0.0), (1.0,0.0), (1.0,1.0), (1.0,2.0), (2.0,2.0)]
I = 0 J = 6 : []
I = 0 J = 7 : []
I = 0 J = 8 : []
I = 0 J = 9 : []
I = 1 J = 2 : [(1.0,0.0), (2.0,0.0)]
I = 1 J = 3 : [(1.0,0.0), (1.0,1.0)]
I = 1 J = 4 : [(1.0,0.0), (1.0,1.0), (1.0,2.0)]
I = 1 J = 5 : [(1.0,0.0), (1.0,1.0), (1.0,2.0), (2.0,2.0)]
I = 1 J = 6 : []
I = 1 J = 7 : []
I = 1 J = 8 : []
I = 1 J = 9 : []
I = 2 J = 3 : [(2.0,0.0), (1.0,0.0), (1.0,1.0)]
I = 2 J = 4 : [(2.0,0.0), (1.0,0.0), (1.0,1.0), (1.0,2.0)]
I = 2 J = 5 : []
I = 2 J = 6 : []
I = 2 J = 7 : []
I = 2 J = 8 : []
I = 2 J = 9 : []
I = 3 J = 4 : [(1.0,1.0), (1.0,2.0)]
I = 3 J = 5 : [(1.0,1.0), (1.0,2.0), (2.0,2.0)]
I = 3 J = 6 : [(1.0,1.0), (1.0,2.0), (2.0,2.0), (3.0,2.0)]
I = 3 J = 7 : [(1.0,1.0), (1.0,2.0), (2.0,2.0), (3.0,2.0), (4.0,2.0)]
I = 3 J = 8 : []
I = 3 J = 9 : []
I = 4 J = 5 : [(1.0,2.0), (2.0,2.0)]
I = 4 J = 6 : [(1.0,2.0), (2.0,2.0), (3.0,2.0)]
I = 4 J = 7 : [(1.0,2.0), (2.0,2.0), (3.0,2.0), (4.0,2.0)]
I = 4 J = 8 : [(1.0,2.0), (2.0,2.0), (3.0,2.0), (4.0,2.0), (4.0,1.0)]
I = 4 J = 9 : [(1.0,2.0), (2.0,2.0), (3.0,2.0), (4.0,2.0), (4.0,1.0), (4.0,0.0)]
I = 5 J = 6 : [(2.0,2.0), (3.0,2.0)]
I = 5 J = 7 : [(2.0,2.0), (3.0,2.0), (4.0,2.0)]
I = 5 J = 8 : [(2.0,2.0), (3.0,2.0), (4.0,2.0), (4.0,1.0)]
I = 5 J = 9 : [(2.0,2.0), (3.0,2.0), (4.0,2.0), (4.0,1.0), (4.0,0.0)]
I = 6 J = 7 : [(3.0,2.0), (4.0,2.0)]
I = 6 J = 8 : [(3.0,2.0), (4.0,2.0), (4.0,1.0)]
I = 6 J = 9 : [(3.0,2.0), (4.0,2.0), (4.0,1.0), (4.0,0.0)]
I = 7 J = 8 : [(4.0,2.0), (4.0,1.0)]
I = 7 J = 9 : [(4.0,2.0), (4.0,1.0), (4.0,0.0)]
I = 8 J = 9 : [(4.0,1.0), (4.0,0.0)]
The GPSR algorithm is successful 30/45 times.
The average time taken by the GPSR algorithm on successful runs is 34377 nanoseconds.

Paths between all pairs of vertices using Dijkstra's algorithm (Min Latency):
I = 0 J = 1 : [(1.0,0.0)]
I = 0 J = 2 : [(2.0,0.0), (1.0,0.0)]
I = 0 J = 3 : [(1.0,1.0), (1.0,0.0)]
I = 0 J = 4 : [(1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 0 J = 5 : [(2.0,2.0), (1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 0 J = 6 : [(3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 0 J = 7 : [(4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 0 J = 8 : [(4.0,1.0), (4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 0 J = 9 : [(4.0,0.0), (4.0,1.0), (4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 1 J = 2 : [(2.0,0.0)]
I = 1 J = 3 : [(1.0,1.0)]
I = 1 J = 4 : [(1.0,2.0), (1.0,1.0)]
I = 1 J = 5 : [(2.0,2.0), (1.0,2.0), (1.0,1.0)]
I = 1 J = 6 : [(3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0)]
I = 1 J = 7 : [(4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0)]
I = 1 J = 8 : [(4.0,1.0), (4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0)]
I = 1 J = 9 : [(4.0,0.0), (4.0,1.0), (4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0)]
I = 2 J = 3 : [(1.0,1.0), (1.0,0.0)]
I = 2 J = 4 : [(1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 2 J = 5 : [(2.0,2.0), (1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 2 J = 6 : [(3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 2 J = 7 : [(4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 2 J = 8 : [(4.0,1.0), (4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 2 J = 9 : [(4.0,0.0), (4.0,1.0), (4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 3 J = 4 : [(1.0,2.0)]
I = 3 J = 5 : [(2.0,2.0), (1.0,2.0)]
I = 3 J = 6 : [(3.0,2.0), (2.0,2.0), (1.0,2.0)]
I = 3 J = 7 : [(4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0)]
I = 3 J = 8 : [(4.0,1.0), (4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0)]
I = 3 J = 9 : [(4.0,0.0), (4.0,1.0), (4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0)]
I = 4 J = 5 : [(2.0,2.0)]
I = 4 J = 6 : [(3.0,2.0), (2.0,2.0)]
I = 4 J = 7 : [(4.0,2.0), (3.0,2.0), (2.0,2.0)]
I = 4 J = 8 : [(4.0,1.0), (4.0,2.0), (3.0,2.0), (2.0,2.0)]
I = 4 J = 9 : [(4.0,0.0), (4.0,1.0), (4.0,2.0), (3.0,2.0), (2.0,2.0)]
I = 5 J = 6 : [(3.0,2.0)]
I = 5 J = 7 : [(4.0,2.0), (3.0,2.0)]
I = 5 J = 8 : [(4.0,1.0), (4.0,2.0), (3.0,2.0)]
I = 5 J = 9 : [(4.0,0.0), (4.0,1.0), (4.0,2.0), (3.0,2.0)]
I = 6 J = 7 : [(4.0,2.0)]
I = 6 J = 8 : [(4.0,1.0), (4.0,2.0)]
I = 6 J = 9 : [(4.0,0.0), (4.0,1.0), (4.0,2.0)]
I = 7 J = 8 : [(4.0,1.0)]
I = 7 J = 9 : [(4.0,0.0), (4.0,1.0)]
I = 8 J = 9 : [(4.0,0.0)]
Dijkstra's algorithm (Min Latency) is successful 45/45 times.
The average time taken by Dijkstra's algorithm (Min Latency) on successful runs is 107779 nanoseconds.

Paths between all pairs of vertices using Dijkstra's algorithm (Min Hops):
I = 0 J = 1 : [(1.0,0.0)]
I = 0 J = 2 : [(2.0,0.0), (1.0,0.0)]
I = 0 J = 3 : [(1.0,1.0), (1.0,0.0)]
I = 0 J = 4 : [(1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 0 J = 5 : [(2.0,2.0), (1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 0 J = 6 : [(3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 0 J = 7 : [(4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 0 J = 8 : [(4.0,1.0), (4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 0 J = 9 : [(4.0,0.0), (4.0,1.0), (4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 1 J = 2 : [(2.0,0.0)]
I = 1 J = 3 : [(1.0,1.0)]
I = 1 J = 4 : [(1.0,2.0), (1.0,1.0)]
I = 1 J = 5 : [(2.0,2.0), (1.0,2.0), (1.0,1.0)]
I = 1 J = 6 : [(3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0)]
I = 1 J = 7 : [(4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0)]
I = 1 J = 8 : [(4.0,1.0), (4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0)]
I = 1 J = 9 : [(4.0,0.0), (4.0,1.0), (4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0)]
I = 2 J = 3 : [(1.0,1.0), (1.0,0.0)]
I = 2 J = 4 : [(1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 2 J = 5 : [(2.0,2.0), (1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 2 J = 6 : [(3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 2 J = 7 : [(4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 2 J = 8 : [(4.0,1.0), (4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 2 J = 9 : [(4.0,0.0), (4.0,1.0), (4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0), (1.0,1.0), (1.0,0.0)]
I = 3 J = 4 : [(1.0,2.0)]
I = 3 J = 5 : [(2.0,2.0), (1.0,2.0)]
I = 3 J = 6 : [(3.0,2.0), (2.0,2.0), (1.0,2.0)]
I = 3 J = 7 : [(4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0)]
I = 3 J = 8 : [(4.0,1.0), (4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0)]
I = 3 J = 9 : [(4.0,0.0), (4.0,1.0), (4.0,2.0), (3.0,2.0), (2.0,2.0), (1.0,2.0)]
I = 4 J = 5 : [(2.0,2.0)]
I = 4 J = 6 : [(3.0,2.0), (2.0,2.0)]
I = 4 J = 7 : [(4.0,2.0), (3.0,2.0), (2.0,2.0)]
I = 4 J = 8 : [(4.0,1.0), (4.0,2.0), (3.0,2.0), (2.0,2.0)]
I = 4 J = 9 : [(4.0,0.0), (4.0,1.0), (4.0,2.0), (3.0,2.0), (2.0,2.0)]
I = 5 J = 6 : [(3.0,2.0)]
I = 5 J = 7 : [(4.0,2.0), (3.0,2.0)]
I = 5 J = 8 : [(4.0,1.0), (4.0,2.0), (3.0,2.0)]
I = 5 J = 9 : [(4.0,0.0), (4.0,1.0), (4.0,2.0), (3.0,2.0)]
I = 6 J = 7 : [(4.0,2.0)]
I = 6 J = 8 : [(4.0,1.0), (4.0,2.0)]
I = 6 J = 9 : [(4.0,0.0), (4.0,1.0), (4.0,2.0)]
I = 7 J = 8 : [(4.0,1.0)]
I = 7 J = 9 : [(4.0,0.0), (4.0,1.0)]
I = 8 J = 9 : [(4.0,0.0)]
Dijkstra's algorithm (Min Hops) is successful 45/45 times.
The average time taken by Dijkstra's algorithm (Min Hops) on successful runs is 103668 nanoseconds.